import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'utils.dart';
import 'consts.dart';

class CachedTileProvider extends TileProvider {
  CachedTileProvider();

  @override
  ImageProvider getImage(Coords coords, TileLayer options) {
    return CachedNetworkImageProvider(getTileUrl(coords, options));
  }
}

class Fleaflet extends StatefulWidget {
  Fleaflet({super.key});

  _Fleaflet? _fleaflet;

  @override
  State createState() {
    _fleaflet = _Fleaflet();
    return _fleaflet!;
  }

  void switchTemplate() {
    _fleaflet!.switchTemplate();
  }

  getIdx() => _fleaflet?.layerIdx ?? "Unitialized";

  toggleBlackRoute() {
    _fleaflet!.toggleBlackRoute();
  }

  toggleBlueRoute() {
    _fleaflet!.toggleBlueRoute();
  }
}

class _Fleaflet extends State<Fleaflet> {
  var layers = [
    TileLayer(
      urlTemplate:
          "https://tileserver.kykint.com/styles/osm-openmaptiles/{z}/{x}/{y}@2x.webp",
      userAgentPackageName: 'com.kykint.osmtest',
      minNativeZoom: 12,
      maxNativeZoom: 17,
      tileProvider: CachedTileProvider(),
    ),
    TileLayer(
      urlTemplate:
          "https://tileserver.kykint.com/styles/maptiler-basic/{z}/{x}/{y}@2x.webp",
      userAgentPackageName: 'com.kykint.osmtest',
      minNativeZoom: 12,
      maxNativeZoom: 17,
      tileProvider: CachedTileProvider(),
    ),
    TileLayer(
      urlTemplate:
          "https://tileserver.kykint.com/styles/osm-bright/{z}/{x}/{y}@2x.webp",
      userAgentPackageName: 'com.kykint.osmtest',
      minNativeZoom: 12,
      maxNativeZoom: 17,
      // retinaMode: true,
    ),
    /*
    TileLayer(
      urlTemplate: "http://192.168.110.3:8080/styles/maptiler-basic/{z}/{x}/{y}@3x.png",
      userAgentPackageName: 'com.kykint.osmtest',
      maxNativeZoom: 20,
    ),
    TileLayer(
      urlTemplate: "http://192.168.110.3:8080/styles/osm-bright/{z}/{x}/{y}@2x.png",
      userAgentPackageName: 'com.kykint.osmtest',
      maxNativeZoom: 20,
      // retinaMode: true,
    ),

     */
    TileLayer(
      urlTemplate:
          "https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png?api_key={api_key}",
      additionalOptions: {
        "api_key": "1a8a6af6-82c8-4d78-b67d-c656a145a967",
      },
      userAgentPackageName: 'com.kykint.osmtest',
      maxNativeZoom: 20,
    ),
    TileLayer(
      urlTemplate: 'https://tile.openstreetmap.org/{z}/{x}/{y}@2x.png',
      userAgentPackageName: 'com.kykint.osmtest',
    ),
    TileLayer(
      urlTemplate: 'https://a.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png',
      userAgentPackageName: 'com.kykint.osmtest',
    ),
  ];

  int layerIdx = 0;

  void switchTemplate() {
    setState(() {
      layerIdx = (layerIdx + 1) % layers.length;
    });
  }

  void toggleBlackRoute() {
    if (polylineMaps.containsKey('black')) {
      polylines.remove(polylineMaps['black']);
      setState(() {
        polylineMaps.remove('black');
      });
    } else {
      var pol = Polyline(
        points: blackBusRoutes.map((e) => LatLng(e[0], e[1])).toList(),
        color: const Color.fromARGB(100, 0, 0, 0),
        strokeWidth: 3,
      );
      polylineMaps['black'] = pol;
      setState(() {
        polylines.add(pol);
      });
    }
  }

  void toggleBlueRoute() {
    if (polylineMaps.containsKey('blue')) {
      polylines.remove(polylineMaps['blue']);
      setState(() {
        polylineMaps.remove('blue');
      });
    } else {
      var pol = Polyline(
        points: blueBusRoutes.map((e) => LatLng(e[0], e[1])).toList(),
        color: const Color.fromARGB(100, 0, 0, 255),
        strokeWidth: 3,
      );
      polylineMaps['blue'] = pol;
      setState(() {
        polylines.add(pol);
      });
    }
  }

  late List<LatLng> lngs;

  @override
  void initState() {
    super.initState();
    lngs = humphreysBorderCoords.map((e) => LatLng(e[0], e[1])).toList();
    polylines =
    [
      Polyline(
        points: lngs,
        color: const Color.fromARGB(150, 204, 102, 0),
        strokeWidth: 3,
      ),
      // Polyline(
      //   points: blueBusRoutes.map((e) => LatLng(e[0], e[1])).toList(),
      //   color: const Color.fromARGB(100, 0, 0, 255),
      //   strokeWidth: 3,
      // ),
    ];
  }

  @override
  void dispose() {
    super.dispose();
  }

  var blueBusRoutes = [[36.9589543, 127.0420793], [36.9592869, 127.0414995], [36.9594241, 127.0412604], [36.9597002, 127.0407236], [36.9598647, 127.0403845], [36.9599125, 127.040286], [36.9599125, 127.040286], [36.9599798, 127.040336], [36.9600864, 127.0404151], [36.9601887, 127.0404624], [36.9602883, 127.0404637], [36.9603959, 127.0404151], [36.9605224, 127.0403174], [36.960945, 127.0400049], [36.9611925, 127.0399206], [36.9620296, 127.0399826], [36.9632872, 127.0401241], [36.9632872, 127.0401241], [36.9632862, 127.0400419], [36.9632791, 127.0394518], [36.9632746, 127.0390781], [36.9632723, 127.0388875], [36.9632636, 127.038168], [36.9632636, 127.038168], [36.9634014, 127.0380976], [36.9634757, 127.0380953], [36.9641647, 127.0380739], [36.964337, 127.0380686], [36.964337, 127.0380686], [36.9643636, 127.0400742], [36.964365, 127.0401799], [36.964365, 127.0401799], [36.9653249, 127.0401415], [36.9653249, 127.0401415], [36.9656257, 127.040137], [36.9662274, 127.0399426], [36.9662274, 127.0399426], [36.966191, 127.0398373], [36.9661857, 127.039822], [36.9661835, 127.0397066], [36.9661811, 127.0395792], [36.9661793, 127.0394729], [36.9661757, 127.039243], [36.9661721, 127.0390177], [36.9661362, 127.0367796], [36.9661362, 127.0367796], [36.9655554, 127.0368084], [36.9654864, 127.0368192], [36.9654446, 127.0368983], [36.9654455, 127.0370451], [36.9654455, 127.0370451], [36.9654848, 127.038534], [36.9654848, 127.038534], [36.965446, 127.0386233], [36.9653059, 127.038628], [36.9653059, 127.038628], [36.9652817, 127.0370442], [36.9652722, 127.0365725], [36.9652722, 127.0365725], [36.9662171, 127.0365111], [36.9662923, 127.0365062], [36.9662923, 127.0365062], [36.9662908, 127.036416], [36.9662529, 127.0341249], [36.9662515, 127.0340873], [36.9662365, 127.0331662], [36.9662258, 127.0325062], [36.9661977, 127.0322392], [36.9661522, 127.032096], [36.9661232, 127.0320154], [36.9660526, 127.0318793], [36.9658959, 127.03169], [36.9655932, 127.0313329], [36.9655359, 127.0312715], [36.9652783, 127.0309824], [36.9649109, 127.0305683], [36.9648372, 127.0304852], [36.9648372, 127.0304852], [36.9650785, 127.0301468], [36.9659998, 127.0288549], [36.9680805, 127.0259109], [36.9681154, 127.0258614], [36.9681154, 127.0258614], [36.9682074, 127.0257375], [36.9693316, 127.024171], [36.9699373, 127.0233128], [36.9701879, 127.0230397], [36.9703743, 127.0228507], [36.970593, 127.0227056], [36.9708513, 127.0225741], [36.9712471, 127.022447], [36.9713067, 127.0224267], [36.9717121, 127.0222884], [36.972207, 127.022108], [36.9724279, 127.0219802], [36.9725906, 127.021872], [36.9728069, 127.0216655], [36.9729233, 127.0215075], [36.9729997, 127.0214037], [36.9730308, 127.0213386], [36.9730719, 127.0212526], [36.9731274, 127.0211279], [36.9732101, 127.0208384], [36.9732642, 127.0205312], [36.9733335, 127.0197471], [36.97334, 127.0196549], [36.9733706, 127.0192227], [36.9736575, 127.0157938], [36.9736968, 127.0152246], [36.9737581, 127.0144762], [36.9737343, 127.0142549], [36.9736811, 127.0141035], [36.9735724, 127.013905], [36.9734213, 127.0137542], [36.9732369, 127.0136367], [36.9732369, 127.0136367], [36.9731457, 127.013589], [36.9729623, 127.0134956], [36.9693243, 127.0116436], [36.9692243, 127.0115926], [36.9692243, 127.0115926], [36.9691836, 127.0117153], [36.9688275, 127.0127893], [36.9687839, 127.0129208], [36.9687839, 127.0129208], [36.9687064, 127.0131698], [36.9684844, 127.0138547], [36.9682303, 127.0146208], [36.9680145, 127.0152759], [36.9677805, 127.0159021], [36.9673466, 127.0172533], [36.9673272, 127.0173135], [36.9672216, 127.0175051], [36.9671363, 127.0175847], [36.9670627, 127.0176534], [36.9665876, 127.0178921], [36.9663953, 127.0180622], [36.9660653, 127.0186253], [36.9660653, 127.0186253], [36.9656797, 127.0192023], [36.9652063, 127.0199118], [36.9650862, 127.0200892], [36.9645652, 127.0208363], [36.9641365, 127.0214912], [36.9640971, 127.0215513], [36.9640971, 127.0215513], [36.9640128, 127.0214712], [36.9637389, 127.0211864], [36.9633338, 127.0208857], [36.9630137, 127.020704], [36.9627168, 127.020608], [36.9622604, 127.0205225], [36.9619343, 127.0204494], [36.9615868, 127.0203233], [36.9613025, 127.0201838], [36.9610742, 127.0200495], [36.9610038, 127.0200077], [36.9610038, 127.0200077], [36.9610332, 127.0199174], [36.9614847, 127.0185661], [36.9619797, 127.0170848], [36.9621435, 127.0165945], [36.9626363, 127.015106], [36.9627884, 127.0146468], [36.9628651, 127.0144151], [36.9634499, 127.0126434], [36.9636942, 127.0119031], [36.9637803, 127.0116424], [36.9645483, 127.0093372], [36.9645906, 127.0092102], [36.9645906, 127.0092102], [36.9646724, 127.0092522], [36.9650843, 127.0094651], [36.9655339, 127.0096973], [36.9656227, 127.0097433], [36.9664362, 127.0101635], [36.9669713, 127.0104399], [36.9670751, 127.0104935], [36.9671374, 127.0105257], [36.9672152, 127.0105655], [36.9678627, 127.0108965], [36.9680446, 127.0109895], [36.9691326, 127.0115498], [36.9692243, 127.0115926], [36.9692243, 127.0115926], [36.9692666, 127.0114647], [36.9696013, 127.0104552], [36.9697626, 127.0099688], [36.9702965, 127.0083582], [36.9703037, 127.0083365], [36.9708405, 127.0067172], [36.9708728, 127.0066198], [36.9708728, 127.0066198], [36.9707801, 127.0065718], [36.9705786, 127.0064692], [36.9701655, 127.0062579], [36.9699484, 127.0061468], [36.9696805, 127.0060098], [36.9692578, 127.0057936], [36.9689179, 127.0056197], [36.9685148, 127.0054135], [36.9674352, 127.0048614], [36.9667338, 127.0045009], [36.9666524, 127.0044601], [36.9664043, 127.004336], [36.9663305, 127.0042992], [36.9663305, 127.0042992], [36.9662518, 127.0042572], [36.965689, 127.0039563], [36.9653483, 127.0037892], [36.964859, 127.003541], [36.9636358, 127.0029203], [36.9633862, 127.0028746], [36.9631213, 127.0028676], [36.9630123, 127.0028687], [36.9630123, 127.0028687], [36.9630118, 127.0027753], [36.963007, 127.0024797], [36.9629912, 127.0005341], [36.9629844, 126.9998262], [36.9629859, 126.9992814], [36.963034, 126.9989427], [36.9630839, 126.9987499], [36.9631653, 126.9984902], [36.9632988, 126.9981982], [36.9634633, 126.9979432], [36.9636423, 126.9976994], [36.9643405, 126.9971385], [36.9644062, 126.9970857], [36.9644062, 126.9970857], [36.9644658, 126.9972079], [36.9645123, 126.9973009], [36.9646142, 126.9974712], [36.9646384, 126.9975022], [36.9647227, 126.9976047], [36.9648714, 126.9977152], [36.9650473, 126.9978093], [36.9652762, 126.9979414], [36.9660096, 126.9983238], [36.9663901, 126.9985167], [36.9673, 126.9989635], [36.9673612, 126.9989957], [36.9679082, 126.9992625], [36.9679788, 126.999297], [36.9679788, 126.999297], [36.9680562, 126.9993385], [36.968797, 126.9997356], [36.9693321, 127.0000225], [36.9704022, 127.0005977], [36.9709066, 127.0008332], [36.9713692, 127.0010696], [36.9717858, 127.0012837], [36.9722426, 127.0015185], [36.9724187, 127.0016207], [36.9725135, 127.0016577], [36.9725135, 127.0016577], [36.9725468, 127.0015572], [36.9730004, 127.0001861], [36.9733569, 126.9991086], [36.9734742, 126.998754], [36.9736174, 126.9983209], [36.9741355, 126.9967891], [36.9741699, 126.9966897], [36.9741699, 126.9966897], [36.974198, 126.9966084], [36.9745398, 126.9955748], [36.9747302, 126.9949991], [36.9750756, 126.9939473], [36.9752979, 126.9932858], [36.9757837, 126.991812], [36.9758133, 126.9917287], [36.9758133, 126.9917287], [36.9758391, 126.9916431], [36.9762721, 126.9902966], [36.9764925, 126.9896303], [36.9765871, 126.9893445], [36.9766878, 126.98904], [36.9771168, 126.9877432], [36.9774104, 126.9868557], [36.9774496, 126.9867472], [36.9774496, 126.9867472], [36.9773656, 126.9867056], [36.9729747, 126.9844478], [36.9729019, 126.9844113], [36.9729019, 126.9844113], [36.9728691, 126.9845101], [36.9725823, 126.9853801], [36.972351, 126.986082], [36.9721448, 126.9867075], [36.9719455, 126.9873119], [36.971288, 126.9893062], [36.971262, 126.9893857], [36.971262, 126.9893857], [36.9713318, 126.9894216], [36.9736866, 126.9906339], [36.9738294, 126.9907075], [36.9745135, 126.9910596], [36.9751942, 126.9914099], [36.9753779, 126.9915045], [36.97571, 126.9916754], [36.9758133, 126.9917287]]
  ;

  var blackBusRoutes = [[36.9589543, 127.0420793], [36.9592869, 127.0414995], [36.9594241, 127.0412604], [36.9597002, 127.0407236], [36.9598647, 127.0403845], [36.9599125, 127.040286], [36.9599125, 127.040286], [36.9599798, 127.040336], [36.9600864, 127.0404151], [36.9601887, 127.0404624], [36.9602883, 127.0404637], [36.9603959, 127.0404151], [36.9605224, 127.0403174], [36.960945, 127.0400049], [36.9611925, 127.0399206], [36.9620296, 127.0399826], [36.9632872, 127.0401241], [36.9632872, 127.0401241], [36.9632862, 127.0400419], [36.9632791, 127.0394518], [36.9632746, 127.0390781], [36.9632723, 127.0388875], [36.9632636, 127.038168], [36.9632636, 127.038168], [36.9634014, 127.0380976], [36.9634757, 127.0380953], [36.9641647, 127.0380739], [36.964337, 127.0380686], [36.964337, 127.0380686], [36.9643636, 127.0400742], [36.964365, 127.0401799], [36.964365, 127.0401799], [36.9653249, 127.0401415], [36.9653249, 127.0401415], [36.9656257, 127.040137], [36.9662274, 127.0399426], [36.9662274, 127.0399426], [36.966191, 127.0398373], [36.9661857, 127.039822], [36.9661835, 127.0397066], [36.9661811, 127.0395792], [36.9661793, 127.0394729], [36.9661757, 127.039243], [36.9661721, 127.0390177], [36.9661362, 127.0367796], [36.9661362, 127.0367796], [36.9655554, 127.0368084], [36.9654864, 127.0368192], [36.9654446, 127.0368983], [36.9654455, 127.0370451], [36.9654455, 127.0370451], [36.9654848, 127.038534], [36.9654848, 127.038534], [36.965446, 127.0386233], [36.9653059, 127.038628], [36.9653059, 127.038628], [36.9652817, 127.0370442], [36.9652722, 127.0365725], [36.9652722, 127.0365725], [36.9662171, 127.0365111], [36.9662923, 127.0365062], [36.9662923, 127.0365062], [36.9662908, 127.036416], [36.9662529, 127.0341249], [36.9662515, 127.0340873], [36.9662365, 127.0331662], [36.9662258, 127.0325062], [36.9661977, 127.0322392], [36.9661522, 127.032096], [36.9661232, 127.0320154], [36.9660526, 127.0318793], [36.9658959, 127.03169], [36.9655932, 127.0313329], [36.9655359, 127.0312715], [36.9652783, 127.0309824], [36.9649109, 127.0305683], [36.9648372, 127.0304852], [36.9648372, 127.0304852], [36.9650785, 127.0301468], [36.9659998, 127.0288549], [36.9680805, 127.0259109], [36.9681154, 127.0258614], [36.9681154, 127.0258614], [36.9682074, 127.0257375], [36.9693316, 127.024171], [36.9699373, 127.0233128], [36.9701879, 127.0230397], [36.9703743, 127.0228507], [36.970593, 127.0227056], [36.9708513, 127.0225741], [36.9712471, 127.022447], [36.9713067, 127.0224267], [36.9717121, 127.0222884], [36.972207, 127.022108], [36.9724279, 127.0219802], [36.9725906, 127.021872], [36.9728069, 127.0216655], [36.9729233, 127.0215075], [36.9729997, 127.0214037], [36.9730308, 127.0213386], [36.9730719, 127.0212526], [36.9731274, 127.0211279], [36.9732101, 127.0208384], [36.9732642, 127.0205312], [36.9733335, 127.0197471], [36.97334, 127.0196549], [36.9733706, 127.0192227], [36.9736575, 127.0157938], [36.9736968, 127.0152246], [36.9737581, 127.0144762], [36.9737343, 127.0142549], [36.9736811, 127.0141035], [36.9735724, 127.013905], [36.9734213, 127.0137542], [36.9732369, 127.0136367], [36.9732369, 127.0136367], [36.9731457, 127.013589], [36.9729623, 127.0134956], [36.9693243, 127.0116436], [36.9692243, 127.0115926], [36.9692243, 127.0115926], [36.9691326, 127.0115498], [36.9680446, 127.0109895], [36.9678627, 127.0108965], [36.9672152, 127.0105655], [36.9671374, 127.0105257], [36.9670751, 127.0104935], [36.9669713, 127.0104399], [36.9664362, 127.0101635], [36.9656227, 127.0097433], [36.9655339, 127.0096973], [36.9650843, 127.0094651], [36.9646724, 127.0092522], [36.9645906, 127.0092102], [36.9645906, 127.0092102], [36.9645317, 127.0091743], [36.96396, 127.0088707], [36.9636935, 127.0087276], [36.9636369, 127.0086836], [36.9635567, 127.0086408], [36.9632529, 127.0084787], [36.9626501, 127.0082037], [36.962552, 127.008159], [36.962552, 127.008159], [36.96258, 127.0080571], [36.9627434, 127.0074706], [36.9629608, 127.0066822], [36.9630175, 127.0063028], [36.963027, 127.0059718], [36.9630121, 127.004819], [36.9630127, 127.0029657], [36.9630123, 127.0028687], [36.9630123, 127.0028687], [36.9631213, 127.0028676], [36.9633862, 127.0028746], [36.9636358, 127.0029203], [36.964859, 127.003541], [36.9653483, 127.0037892], [36.965689, 127.0039563], [36.9662518, 127.0042572], [36.9663305, 127.0042992], [36.9663305, 127.0042992], [36.9664043, 127.004336], [36.9666524, 127.0044601], [36.9667338, 127.0045009], [36.9674352, 127.0048614], [36.9685148, 127.0054135], [36.9689179, 127.0056197], [36.9692578, 127.0057936], [36.9696805, 127.0060098], [36.9699484, 127.0061468], [36.9701655, 127.0062579], [36.9705786, 127.0064692], [36.9707801, 127.0065718], [36.9708728, 127.0066198], [36.9708728, 127.0066198], [36.9708405, 127.0067172], [36.9703037, 127.0083365], [36.9702965, 127.0083582], [36.9697626, 127.0099688], [36.9696013, 127.0104552], [36.9692666, 127.0114647], [36.9692243, 127.0115926]]
;

  late List<Polyline> polylines;
  Map<String, Polyline> polylineMaps = {};


  var humphreysBorderCoords = [
    [36.9691682, 127.0367575],
    [36.9694197, 127.0367542],
    [36.969448, 127.0335371],
    [36.9694428, 127.0326733],
    [36.9693942, 127.0315353],
    [36.9694206, 127.0313015],
    [36.9695164, 127.0304315],
    [36.9695732, 127.0297448],
    [36.9696203, 127.0294994],
    [36.9696964, 127.0287511],
    [36.9697639, 127.0279444],
    [36.9697959, 127.0276716],
    [36.969901, 127.0273293],
    [36.9700299, 127.0270385],
    [36.970313, 127.0266328],
    [36.970546, 127.0264807],
    [36.9738873, 127.0247488],
    [36.974031, 127.0246495],
    [36.9742308, 127.0244314],
    [36.97485, 127.0234443],
    [36.9748308, 127.0228824],
    [36.9748664, 127.0227701],
    [36.97491, 127.0227362],
    [36.9758293, 127.0222145],
    [36.9759357, 127.022096],
    [36.9759761, 127.0220134],
    [36.9762567, 127.0201596],
    [36.9763264, 127.0198153],
    [36.9772596, 127.0164397],
    [36.9772778, 127.0159596],
    [36.9772939, 127.0158979],
    [36.9773421, 127.0158161],
    [36.9773892, 127.0156431],
    [36.9773817, 127.0155734],
    [36.9776592, 127.0145729],
    [36.9784177, 127.0119108],
    [36.9784799, 127.0117915],
    [36.9785152, 127.0116386],
    [36.9785217, 127.0115367],
    [36.9791661, 127.0096319],
    [36.9807758, 127.0061508],
    [36.9806518, 127.0057289],
    [36.9818599, 127.00349],
    [36.987359, 126.9928369],
    [36.9880536, 126.9909796],
    [36.9881975, 126.9898966],
    [36.9882977, 126.9894217],
    [36.9882875, 126.9889364],
    [36.988326, 126.9882525],
    [36.9881497, 126.9867033],
    [36.9878128, 126.9853473],
    [36.9869164, 126.9839],
    [36.9838585, 126.9813706],
    [36.9803837, 126.979849],
    [36.980118, 126.9796666],
    [36.9787282, 126.9790688],
    [36.9783342, 126.978971],
    [36.9781458, 126.9789624],
    [36.9779067, 126.9789773],
    [36.9765153, 126.9792047],
    [36.9763503, 126.9792515],
    [36.9757875, 126.9795486],
    [36.9732207, 126.9812692],
    [36.9730126, 126.9814423],
    [36.9725175, 126.981693],
    [36.9723544, 126.9817064],
    [36.9713127, 126.9821138],
    [36.9704454, 126.9826305],
    [36.9701764, 126.9827646],
    [36.9651641, 126.9859457],
    [36.9635458, 126.9867049],
    [36.9632961, 126.9867558],
    [36.9631092, 126.986749],
    [36.9615663, 126.9861461],
    [36.9605894, 126.9860274],
    [36.960565, 126.9901431],
    [36.9606244, 126.9902742],
    [36.9606715, 126.990378],
    [36.960738, 126.9905247],
    [36.9607166, 126.9905263],
    [36.96071, 126.9905366],
    [36.9606043, 126.9906114],
    [36.9605431, 127.0046702],
    [36.9605019, 127.0048315],
    [36.959474, 127.0057884],
    [36.9589925, 127.0075251],
    [36.9577704, 127.0108163],
    [36.9574707, 127.0106587],
    [36.9561875, 127.0140796],
    [36.9550663, 127.0162162],
    [36.9545685, 127.0161598],
    [36.9544766, 127.016921],
    [36.9540833, 127.0168716],
    [36.9534799, 127.0181188],
    [36.9526989, 127.0198857],
    [36.9526697, 127.0198971],
    [36.9515943, 127.0184229],
    [36.9515143, 127.0184195],
    [36.9514289, 127.0185526],
    [36.9513825, 127.0185504],
    [36.9512903, 127.018546],
    [36.9512293, 127.0185431],
    [36.9512043, 127.0185419],
    [36.9511663, 127.0185401],
    [36.9511554, 127.0183978],
    [36.950687, 127.0183704],
    [36.9502972, 127.0179574],
    [36.9499839, 127.0171036],
    [36.9498525, 127.0169777],
    [36.949775, 127.016995],
    [36.9497299, 127.0170084],
    [36.9497256, 127.0168971],
    [36.9496485, 127.0168015],
    [36.9494663, 127.0167282],
    [36.9493759, 127.0166348],
    [36.9489263, 127.0166668],
    [36.9485107, 127.0166964],
    [36.9479884, 127.0167929],
    [36.9477009, 127.0168734],
    [36.9477048, 127.0169882],
    [36.9478814, 127.0174207],
    [36.948296, 127.01836],
    [36.9484527, 127.0197754],
    [36.9483927, 127.0197881],
    [36.9466049, 127.0201564],
    [36.9461803, 127.0202385],
    [36.945463, 127.0203694],
    [36.9453322, 127.0207063],
    [36.9455875, 127.0209782],
    [36.9458857, 127.0212958],
    [36.9466964, 127.0221593],
    [36.9473975, 127.0276953],
    [36.9469304, 127.0280906],
    [36.9469441, 127.0335825],
    [36.9472417, 127.0335823],
    [36.9475077, 127.0338799],
    [36.9468372, 127.0347699],
    [36.9467151, 127.0349723],
    [36.9467013, 127.0352827],
    [36.9460255, 127.0349502],
    [36.9459776, 127.0350516],
    [36.9460098, 127.0350918],
    [36.9460805, 127.0354512],
    [36.9463828, 127.035647],
    [36.9464192, 127.0355773],
    [36.9466421, 127.0357543],
    [36.9469873, 127.0359313],
    [36.947182, 127.0359942],
    [36.9472444, 127.0360244],
    [36.9474654, 127.0363712],
    [36.9475079, 127.0363288],
    [36.9475885, 127.0364479],
    [36.9476485, 127.0365366],
    [36.9476317, 127.0366994],
    [36.9492426, 127.0389324],
    [36.9499111, 127.0381871],
    [36.9499497, 127.0382407],
    [36.9501952, 127.0379567],
    [36.9502466, 127.0380418],
    [36.9502985, 127.0381275],
    [36.9513579, 127.0386806],
    [36.9531587, 127.0396053],
    [36.9532614, 127.039713],
    [36.9533805, 127.0399598],
    [36.9534404, 127.0402619],
    [36.9532476, 127.0413152],
    [36.95288, 127.0432027],
    [36.9528302, 127.0439393],
    [36.9529354, 127.0447798],
    [36.9532582, 127.0455766],
    [36.9544712, 127.0470304],
    [36.9547278, 127.0472925],
    [36.9550531, 127.0473412],
    [36.9556062, 127.0468171],
    [36.9559876, 127.0464532],
    [36.9562777, 127.0461301],
    [36.9565985, 127.0453735],
    [36.9569889, 127.044919],
    [36.9572045, 127.0447175],
    [36.9575331, 127.045095],
    [36.957622, 127.0449687],
    [36.9576728, 127.0448944],
    [36.9577435, 127.044784],
    [36.957776, 127.0447433],
    [36.9578847, 127.0445842],
    [36.957636, 127.0443074],
    [36.957711, 127.0441536],
    [36.9577761, 127.0440184],
    [36.9579416, 127.0438279],
    [36.9584412, 127.0432414],
    [36.9586288, 127.0433556],
    [36.9588038, 127.0430919],
    [36.9589925, 127.0428077],
    [36.9588593, 127.042557],
    [36.9596301, 127.0410972],
    [36.9601068, 127.0407824],
    [36.961245, 127.0400307],
    [36.9650278, 127.0403839],
    [36.9653002, 127.0403717],
    [36.967697, 127.0395748],
    [36.9683197, 127.0370046],
    [36.9687773, 127.036838],
    [36.9687767, 127.0367628],
    [36.9688703, 127.0367615],
    [36.9689743, 127.0367601],
    [36.9690265, 127.0367594],
    [36.9691328, 127.036758],
    [36.9691682, 127.0367575]
  ];

  @override
  Widget build(BuildContext context) {
    print('should use retina: ${MediaQuery.of(context).devicePixelRatio}');
    return Container(
      child: FlutterMap(
        options: MapOptions(
          center: LatLng(
            Consts.humphreysCenterCoords['lat'] ?? 0,
            Consts.humphreysCenterCoords['lng'] ?? 0,
          ),
          minZoom: 12.5,
          zoom: 15,
          maxZoom: 17,
          interactiveFlags: InteractiveFlag.all & ~InteractiveFlag.rotate,
          onPositionChanged: (position, hasGesture) {
            print('zoom level:${position.zoom}');
          },
          maxBounds: LatLngBounds(
            LatLng(
              Consts.humphreysMapBounds[CoordsType.y0]!,
              Consts.humphreysMapBounds[CoordsType.x0]!,
            ),
            LatLng(
              Consts.humphreysMapBounds[CoordsType.y1]!,
              Consts.humphreysMapBounds[CoordsType.x1]!,
            ),
          ),
        ),
        nonRotatedChildren: [
          OverflowBox(
            alignment: Alignment.bottomRight,
            maxWidth: double.infinity,
            child: AttributionWidget.defaultWidget(
              source: layers[layerIdx].urlTemplate ?? '',
              onSourceTapped: () {},
            ),
          )
        ],
        children: [
          layers[layerIdx],
          PolylineLayer(
            polylineCulling: false,
            polylines: polylines,
          ),
        ],
      ),
    );
  }

/*
  final _templateRe = RegExp(r'\{ *([\w_-]+) *\}');

  /// Replaces the templating placeholders with the provided data map.
  ///
  /// Example input: https://tile.openstreetmap.org/{z}/{x}/{y}.png
  ///
  /// Throws an [Exception] if any placeholder remains unresolved.
  String template(String str, Map<String, String> data) {
    data['z'] = (int.parse(data['z']!)-1).toString();
    print('str:${str}, data:$data');
    return str.replaceAllMapped(_templateRe, (Match match) {
      final firstMatch = match.group(1);
      if (firstMatch == null) {
        throw Exception('incorrect URL template: $str');
      }
      final value = data[firstMatch];
      if (value == null) {
        throw Exception('No value provided for variable ${match.group(1)}');
      } else {
        return value;
      }
    });
  }

 */
}
